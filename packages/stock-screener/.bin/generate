#!/usr/bin/env node
const finviz = require('@stonksjs/finviz');
const fs = require('fs');
const camelCase = require('lodash/camelCase');
const snakeCase = require('lodash/snakeCase');
const path = require('path');
// import screener from '../src';

const createClass = async () => {
  const results = await finviz.getScreenersList();
  const properties = results.reduce((output, { name }) => {
    const filter = snakeCase(name).toUpperCase();
    return {
      [filter]: name,
      ...output,
    };
  }, {});
  // console.log(properties);
  const functions = results.map(({ id, name }) => {
    const fn = camelCase(`get ${name}`);
    const filter = snakeCase(name).toUpperCase();
    return `async ${fn}(): Promise<string[]> {
  return finviz.getScreener(this.filters.${filter});
}`;
  });
  const output = `import finviz, { Screener } from '@stonksjs/finviz';

export class StockScreener {
  filters = ${JSON.stringify(properties, null, 2)};

  static async getFilters(): Promise<Screener[]> {
    return finviz.getScreenersList();
  }

  ${functions.join('\n\n  ')}
}

export default StockScreener;
`;
  // console.log(output);
  await fs.promises.writeFile(
    path.join(__dirname, '../src/StockScreener.ts'),
    output,
  );
};

const getFiltersMarkdown = async () => {
  const results = await finviz.getScreenersList();
  results.forEach(({ name, url }) => {
    const id = snakeCase(name).toUpperCase();
    console.log(`- [${name}](${url}): \`${id}\``);
  });
};

const main = async () => {
  // await createClass()
  // await getFiltersMarkdown();
};

main().catch(console.error);
